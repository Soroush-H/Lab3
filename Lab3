1.

for $x in doc('mondial/mondial.xml')/mondial/country
for $y in doc('mondial/mondial.xml')/mondial/sea
where $y/name = "Baltic Sea" and $x/@car_code = tokenize($y/@country, " ")
return tokenize($x/@capital, '-')

2.

let $list :=
  for $x in /mondial/desert
  order by $x/latitude descending
  return $x

return ('name= ', $list[1]/name , ' area=', $list[1]/area)

3.

<mountains>
{

    let $doc := doc("mondial/mondial.xml")
    for $continent in $doc//continent
    return <continent name="{$continent/name/text()}">
             {(let $countries := $doc//country[encompassed/@continent = $continent/@id]
               for $mountain in $doc//mountain[located/@country = $countries/@car_code]
               order by $mountain/elevation/number() descending
               return <highest elevation="{$mountain/elevation/number()}">
                        {$mountain/name/text()}
                      </highest>)[1]}
           </continent>
}
</mountains>


5.

let $continents :=
  for $x in doc('mondial/mondial.xml')/mondial/continent
  where $x/area > 9000000
  return lower-case($x/name)

let $cities1 :=
  for $x in doc('mondial/mondial.xml')/mondial/country/province/city
  where $x/latitude >= -35 and $x/latitude <= 35
  and $x/../../encompassed[1]/@continent = $continents
  return <cont cont = "{data($x/../../encompassed[1]/@continent)}"/>

let $cities2 :=
  for $x in doc('mondial/mondial.xml')/mondial/country/city
  where $x/latitude >= -35 and $x/latitude <= 35
  and $x/../encompassed[1]/@continent = $continents
  return <cont cont = "{data($x/../encompassed[1]/@continent)}"/>

return
  for $values in $continents
  let $count1 := count($cities1[@cont = $values])
  let $count2 := count($cities2[@cont = $values])
  return concat($values," ",$count1 + $count2)


7.

for $x in doc('mondial/mondial.xml')/mondial/organization
for $y in doc('mondial/mondial.xml')/mondial/country
where contains($x/name, 'Nuclear') and not(exists($x/established)) and $y/name = tokenize($x/@headq, '-')[2] and $y/encompassed/@continent = 'europe' return $x/name


8. 

declare function local:pow($x as xs:double , $n as xs:integer ) as xs:double
{
  if($n eq 0)
   then 1
   else
    (let $h := $n idiv 2,
         $halfResult := local:pow($x, $h)
      return
            if($n mod 2 eq 0)
              then $halfResult * $halfResult
              else $x * $halfResult * $halfResult
        )

};


for $x in /mondial/country

let $year := max($x/population/@year)
let $pop := $x/population[@year = $year]
let $growth := ($x/population_growth div 100) +1
let $growth := if($growth >= 0) then $growth else 1
let $estpop10 := $pop*(local:pow(data($growth),10))
let $estpop25 := $pop*(local:pow(data($growth),25))
let $estpop50 := $pop*(local:pow(data($growth),50))
let $estpop100 := $pop*(local:pow(data($growth),100))

return
<country>
  <name>{$x/name} </name>
<year>{$year}</year>
<pop>{$pop}</pop>
<growth>{$growth}</growth>
<tenyears>{$estpop10}</tenyears>
<tjugoyears>{$estpop25}</tjugoyears>
<femtioyears>{$estpop50}</femtioyears>
<hundrayears>{$estpop100}</hundrayears>
</country>





10.

declare function local:reachableFrom($countries as element(country)*, $oldreachable as element(country)*){
    let $newreachable :=
        for $allCountries in $countries
        for $countryReach in $oldreachable
        where $countryReach/border/@country = $allCountries/@car_code
        return $allCountries

    let $new := $newreachable union $oldreachable
    return if (count($oldreachable) = count($new)) then $new
    else local:reachableFrom($countries, $new)
};

let $countryData :=
  let $countries := /mondial/country
  let $country := $countries[name='Sweden']
  return local:reachableFrom($countries, $country)

return $countryData/name
